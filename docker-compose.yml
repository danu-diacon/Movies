version: '3.8'

networks:
  movies_network:
    driver: bridge

services:
  # --- MongoDB 1 ---
  mongo1:
    image: mongo:6
    container_name: mongo1
    hostname: mongo1
    restart: unless-stopped
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    ports: ["27018:27017"]
    volumes:
      - mongo1_data:/data/db
    networks:
      - movies_network

  # --- MongoDB 2 ---
  mongo2:
    image: mongo:6
    container_name: mongo2
    hostname: mongo2
    restart: unless-stopped
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    ports: ["27019:27017"]
    volumes:
      - mongo2_data:/data/db
    networks:
      - movies_network

  # --- MongoDB 3 ---
  mongo3:
    image: mongo:6
    container_name: mongo3
    hostname: mongo3
    restart: unless-stopped
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    ports: ["27020:27017"]
    volumes:
      - mongo3_data:/data/db
    networks:
      - movies_network

  # --- Mongo Setup ---
  mongo-setup:
    image: mongo:6
    container_name: mongo-setup
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    restart: "no"
    networks: [movies_network]
    entrypoint: >
      bash -c "
        echo 'Așteptăm ca nodurile Mongo să pornească...';
        sleep 10;

        echo 'Inițializăm Replica Set...';
        mongosh --host mongo1:27017 --eval '
          try {
            rs.initiate({
              _id: \"rs0\",
              members: [
                { _id: 0, host: \"mongo1:27017\" },
                { _id: 1, host: \"mongo2:27017\" },
                { _id: 2, host: \"mongo3:27017\" }
              ]
            });
          } catch(e) { print(e); }
        ';

        echo 'Așteptăm ca mongo1 să devină PRIMARY...';
        until mongosh --host mongo1:27017 --eval 'rs.isMaster().ismaster' | grep 'true' > /dev/null; do
          echo '... încă nu e PRIMARY, mai așteptăm 3s ...';
          sleep 3;
        done;

        echo 'Creăm utilizatorul admin...';
        mongosh --host mongo1:27017 --eval '
          db = db.getSiblingDB(\"admin\");
          if (!db.getUser(\"admin\")) {
            db.createUser({
              user: \"admin\",
              pwd: \"admin123\",
              roles: [ { role: \"root\", db: \"admin\" } ]
            });
            print(\"Admin user created successfully!\");
          } else {
            print(\"Admin user already exists.\");
          }
        ';

        echo 'Verificăm autentificarea...';
        mongosh --host mongo1:27017 --eval '
          db = db.getSiblingDB(\"admin\");
          authSuccess = db.auth(\"admin\", \"admin123\");
          if (authSuccess) {
            print(\"Authentication successful!\");
          } else {
            print(\"Authentication failed!\");
          }
        ';

        echo 'Replica Set și utilizatorul admin au fost configurate complet!';
      "

  # --- Redis ---
  redis:
    image: redis:7-alpine
    container_name: movies_redis
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped
    ports: ["6379:6379"]
    volumes:
      - redis_data:/data
    networks:
      - movies_network

  # --- Movies API 1 ---
  movies.api1:
    build:
      context: .
      dockerfile: Movies.Api/Dockerfile
    container_name: movies-api1
    restart: unless-stopped
    environment:
      ASPNETCORE_URLS: http://+:8080
      ASPNETCORE_ENVIRONMENT: Docker
      MongoDbSettings__ConnectionString: mongodb://admin:admin123@mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0&authSource=admin
      MongoDbSettings__DatabaseName: moviesdb
      MongoDbSettings__CollectionName: movies
      Redis__ConnectionString: redis:6379
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - mongo-setup
      - redis
    expose: ["8080"]
    networks:
      - movies_network

  # --- Movies API 2 ---
  movies.api2:
    build:
      context: .
      dockerfile: Movies.Api/Dockerfile
    container_name: movies-api2
    restart: unless-stopped
    environment:
      ASPNETCORE_URLS: http://+:8080
      ASPNETCORE_ENVIRONMENT: Docker
      MongoDbSettings__ConnectionString: mongodb://admin:admin123@mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0&authSource=admin
      MongoDbSettings__DatabaseName: moviesdb
      MongoDbSettings__CollectionName: movies
      Redis__ConnectionString: redis:6379
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - mongo-setup
      - redis
    expose: ["8080"]
    networks:
      - movies_network

  # --- Movies API 3 ---
  movies.api3:
    build:
      context: .
      dockerfile: Movies.Api/Dockerfile
    container_name: movies-api3
    restart: unless-stopped
    environment:
      ASPNETCORE_URLS: http://+:8080
      ASPNETCORE_ENVIRONMENT: Docker
      MongoDbSettings__ConnectionString: mongodb://admin:admin123@mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0&authSource=admin
      MongoDbSettings__DatabaseName: moviesdb
      MongoDbSettings__CollectionName: movies
      Redis__ConnectionString: redis:6379
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - mongo-setup
      - redis
    expose: ["8080"]
    networks:
      - movies_network

  # --- Frontend (doar build, fără runtime) ---
  movies.web:
    build:
      context: ./Movies.Web
      dockerfile: Dockerfile
      target: build
    container_name: movies-web-builder
    volumes:
      - movies_web_dist:/app/dist
    command: ["true"]

  # --- Nginx - servește frontend + load balancing pentru API ---
  nginx:
    image: nginx:alpine
    container_name: movies-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - movies_web_dist:/usr/share/nginx/html:ro
    depends_on:
      - movies.api1
      - movies.api2
      - movies.api3
      - movies.web
    networks:
      - movies_network

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  redis_data:
  movies_web_dist: